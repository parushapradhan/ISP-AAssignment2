import java.io.*;
import java.net.*;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;

public class CipherServer
{
    public static void main(String[] args) throws Exception 
    {
        int serverPort = 7999;
        ServerSocket serverSocket = new ServerSocket(serverPort);
        Socket clientSocket = serverSocket.accept();

        // Step 1: Read the key from the file generated by the client.
        File desKeyFile = new File("deskey.dat");
        while (!desKeyFile.exists()) {
            System.out.println("Waiting for deskey.dat to be created...");
            Thread.sleep(500); // wait for 500ms before checking again
        }
        byte[] keyData = new byte[(int) desKeyFile.length()];
        try (DataInputStream keyInputStream = new DataInputStream(new FileInputStream(desKeyFile))) {
            keyInputStream.readFully(keyData);
        }
        
        SecretKey secretKey = new SecretKeySpec(keyData, "DES");

        // Step 2: Read the encrypted message from the socket.
        DataInputStream socketInputStream = new DataInputStream(clientSocket.getInputStream());
        // Read the length of the incoming message first.
        int messageLength = socketInputStream.readInt();
        byte[] cipherText = new byte[messageLength];
        socketInputStream.readFully(cipherText);

        // Step 3: Use the key to decrypt the incoming message from clientSocket.
        Cipher decryptor = Cipher.getInstance("DES/ECB/PKCS5Padding");
        decryptor.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] plainTextBytes = decryptor.doFinal(cipherText);
        String plainText = new String(plainTextBytes, "UTF-8");
        
        // Step 4: Print out the decrypted String to verify the original message.
        System.out.println("Decrypted message: " + plainText);

        clientSocket.close();
        serverSocket.close();
    }
}
